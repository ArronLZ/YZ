self$mark <- mark
self$eset <- eset
self$group <- group
self$os <- os
self$phen <- phen
# private$test <- test # 给私有属性赋值
},
hello = function() {
print(paste("hello", self$mark))
# private$runtest(self$mark) # 调用私有方法
},
#' @description updateGroup
#' @param suffix character the match rule
#' @param endT character if match true
#' @param endF character if match false
#' @return no return, just update object's field group
#' @examples #
updateGroup = function(suffix = "01A", endT="Tumor", endF="Normal") {
self$group <- private$esetMakeGroup(eset = self$eset,
suffix = suffix,
endT=endT, endF=endF)
},
#' @description DEG analysis pipeline, DESeq2 deg analysis, plot pca, prepare GSEA
#' @param f_mark character  a mark show what analysis you are doning, \cr
#'  it will be used for subdir of outdir or filename
#' @param outdir character outdir
#' @param fpval number criteria of DEG analysis: Pvalue, defaut is 0.05
#' @param ffdr number criteria of DEG analysis: FDR/Qvalue, defaut is 0.1
#' @param flogfc  number criteria of DEG analysis: log2FC, defaut is 1
#' @return a list (deg analysis)
#' @examples #
runDEG.deseq2 = function(f_mark = "DE", outdir = "result",
fpval = 0.05, ffdr=0.1, flogfc=1) {
private$deg.deseq2(f_mark = f_mark, outdir = outdir,
fpval=fpval, ffdr=ffdr, flogfc=flogfc)
}
),
private = list(
# outdir <- "result",
# test = NA,
# runtest = function(canshu) {
#   print(paste(canshu, "and", private$test))
# },
validity = function(eset, group){
if (!all(names(eset) == rownames(group))) {
stop("The eset's colnames must be equal to rownames of phen")
}
},
esetMakeGroup = function(eset, suffix = "01A", endT="Tumor", endF="Normal") {
group <- data.frame(row.names = colnames(eset),
Type = ifelse(endsWith(colnames(eset), suffix), endT, endF),
check.names = F)
group$Type <- as.factor(group$Type)
return(group)
},
deg.deseq2 = function(f_mark = "DE", outdir = "result",
fpval, ffdr, flogfc) {
outdirsub <- paste0(outdir, "/", f_mark)
outdirsub.gsea <- paste0(outdirsub, "/gsea")
outdirsub.rich <- paste0(outdirsub, "/rich")
glist <- list(eset = self$eset, group = self$group,
f_mark = f_mark)
dds <- DEG_DESeq2.dds(exprset.group=glist, batch = F)
DEG_DESeq2.pca(dds, outdir = outdirsub) # 此处有warning信息，不用管。
dds_list <- DEG_DESeq2.ana(dds)
# 差异后分析
all_father <- DEGres_ToRICH(diffan.obj = dds_list,
p=fpval, q=ffdr, f=flogfc,
mark=f_mark,
outdir = outdirsub.rich)
# 构建GSEA官网软件分析所需格式文件
DEGres_ToGSEA(diffan.obj = dds_list, outdir = outdirsub.gsea) # 此处有warning，不用管。
return(all_father)
}
)
)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
#' R6 Class DEeset : DEG analysis object
#' @description DEG analysis pipeline object
#' @importFrom R6 R6Class
#' @importFrom LZ DEG_DESeq2.dds
#' @importFrom LZ DEG_DESeq2.pca
#' @importFrom LZ DEG_DESeq2.ana
#' @importFrom LZ DEGres_ToRICH
#' @export
#' @author Jiang
DEeset <- R6Class("DEeset",
public = list(
#' @field mark character the object name.
mark=NA,
#' @field eset dataframe a exprs eset dataframe for different gene anlaysis, \cr
#'  col: gene, rownames: samples
eset=NA,
#' @field group dataframe a phen dataframe for different gene anlaysis, \cr
#'  the first col: Type, rownames: samples
group=NA,
#' @field os dataframe os data, rowname: samples, col: OS OS.time
os=NA,
#' @field phen dataframe phen data, rowname: samples, col: age, sex, stage ...
phen=NA,
#' @description
#' Create a new DEeset object.
#' @param mark character the object name.
#' @param eset dataframe a exprs eset dataframe for different gene anlaysis, \cr
#'  col: gene, rownames: samples
#' @param group dataframe a phen dataframe for different gene anlaysis, \cr
#'  the first col: Type, rownames: samples
#' @param os dataframe os data, rowname: samples, col: OS OS.time
#' @param phen dataframe phen data, rowname: samples, col: age, sex, stage ...
#' @return A new `DEeset` object
initialize = function(mark, eset, group=NULL,
os=NULL, phen=NULL) {
suppressWarnings({
if (!is.null(group)) private$validity(eset, group)
if (!is.null(os)) private$validity(eset, os)
if (!is.null(phen)) private$validity(eset, phen)
})
self$mark <- mark
self$eset <- eset
self$group <- group
self$os <- os
self$phen <- phen
# private$test <- test # 给私有属性赋值
},
#' @description
#' test
hello = function() {
print(paste("hello", self$mark))
# private$runtest(self$mark) # 调用私有方法
},
#' @description updateGroup
#' @param suffix character the match rule
#' @param endT character if match true
#' @param endF character if match false
#' @return no return, just update object's field group
#' @examples #
updateGroup = function(suffix = "01A", endT="Tumor", endF="Normal") {
self$group <- private$esetMakeGroup(eset = self$eset,
suffix = suffix,
endT=endT, endF=endF)
},
#' DEG analysis pipleline
#' @description DEG analysis pipeline, DESeq2 deg analysis, plot pca, prepare GSEA
#' @param f_mark character  a mark show what analysis you are doning, \cr
#'  it will be used for subdir of outdir or filename
#' @param outdir character outdir
#' @param fpval number criteria of DEG analysis: Pvalue, defaut is 0.05
#' @param ffdr number criteria of DEG analysis: FDR/Qvalue, defaut is 0.1
#' @param flogfc  number criteria of DEG analysis: log2FC, defaut is 1
#' @return a list (deg analysis)
#' @examples #
runDEG.deseq2 = function(f_mark = "DE", outdir = "result",
fpval = 0.05, ffdr=0.1, flogfc=1) {
private$deg.deseq2(f_mark = f_mark, outdir = outdir,
fpval=fpval, ffdr=ffdr, flogfc=flogfc)
}
),
private = list(
# outdir <- "result",
# test = NA,
# runtest = function(canshu) {
#   print(paste(canshu, "and", private$test))
# },
validity = function(eset, group){
if (!all(names(eset) == rownames(group))) {
stop("The eset's colnames must be equal to rownames of phen")
}
},
esetMakeGroup = function(eset, suffix = "01A", endT="Tumor", endF="Normal") {
group <- data.frame(row.names = colnames(eset),
Type = ifelse(endsWith(colnames(eset), suffix), endT, endF),
check.names = F)
group$Type <- as.factor(group$Type)
return(group)
},
deg.deseq2 = function(f_mark = "DE", outdir = "result",
fpval, ffdr, flogfc) {
outdirsub <- paste0(outdir, "/", f_mark)
outdirsub.gsea <- paste0(outdirsub, "/gsea")
outdirsub.rich <- paste0(outdirsub, "/rich")
glist <- list(eset = self$eset, group = self$group,
f_mark = f_mark)
dds <- DEG_DESeq2.dds(exprset.group=glist, batch = F)
DEG_DESeq2.pca(dds, outdir = outdirsub) # 此处有warning信息，不用管。
dds_list <- DEG_DESeq2.ana(dds)
# 差异后分析
all_father <- DEGres_ToRICH(diffan.obj = dds_list,
p=fpval, q=ffdr, f=flogfc,
mark=f_mark,
outdir = outdirsub.rich)
# 构建GSEA官网软件分析所需格式文件
DEGres_ToGSEA(diffan.obj = dds_list, outdir = outdirsub.gsea) # 此处有warning，不用管。
return(all_father)
}
)
)
library(R6)
library(LZ)
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
devtools::load_all()
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
install.packages("D:/IMPORTANT/YZ_0.0.3.tar.gz", repos = NULL, type = "source")
# stable version on CRAN
install.packages("bookdown")
# or development version on GitHub
# remotes::install_github('rstudio/bookdown')
install.packages('tinytex')
install.packages("tinytex")
LZ::setproxy()
tinytex::install_tinytex()
# LZ::setproxy()
tinytex::install_tinytex()
tinytex::uninstall_tinytex()
# LZ::setproxy()
tinytex::install_tinytex()
getwd()
# to uninstall TinyTeX, run tinytex::uninstall_tinytex()
writeLines(c(
'\\documentclass{article}',
'\\begin{document}', 'Hello world!', '\\end{document}'
), 'test.tex')
tinytex::pdflatex('test.tex')
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man")
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man")
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man")
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man")
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man")
unlink("./man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
DEres <- DEres$new(resdf = res_deg_ana$DIFF.ALL,
filter.record = paste(pval, fdr, logfc, sep = ";")
paste0('a','b', sep=',')
paste0('a','b', sep=',')
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man", recursive = T)
devtools::load_all()
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
# PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
# RSTUDIO_PANDOC="C:\Users\LZ\AppData\Local\Pandoc"
library(R6)
library(LZ)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("./man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
